import{w as s,I as m,b7 as p}from"./index-BSR5w7Gk.js";import{p as n}from"./MeshVertexAttributes-BnEq6naw.js";import{B as a}from"./vertexSpaceConversion-K1LU5aew.js";import"./mat3-BwQ82Z_B.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-DpCM1Mgc.js";import"./spatialReferenceEllipsoidUtils-CLFJc47D.js";import"./computeTranslationToOriginAndRotation-CuHRf7Qf.js";import"./projectPointToVector-DiNbHVpY.js";import"./meshVertexSpaceUtils-CTmV2OYo.js";import"./MeshLocalVertexSpace-CfqEZ077.js";import"./vec3-NA1J0Wgp.js";import"./BufferView-Dn7QKJ9g.js";import"./vec4-EIFG3hdB.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
//# sourceMappingURL=convertMeshVertexSpace-D_sm6Bd0.js.map
