import{w as s,I as m,b7 as p}from"./index-0pHHYqT1.js";import{p as n}from"./MeshVertexAttributes-D94WxYa9.js";import{B as a}from"./vertexSpaceConversion-DGqw3Joa.js";import"./mat3-Cmn8Ioet.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-Bu0nRAs3.js";import"./spatialReferenceEllipsoidUtils-ByX_1VRd.js";import"./computeTranslationToOriginAndRotation-DUgokibG.js";import"./projectPointToVector-DGzir9-a.js";import"./meshVertexSpaceUtils-BaIPzrCV.js";import"./MeshLocalVertexSpace-n04vDJ-_.js";import"./vec3-rxXh_Y6X.js";import"./BufferView-Bh4Zj8Q9.js";import"./vec4-a7UBymDb.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
//# sourceMappingURL=convertMeshVertexSpace-B-HbfZ2F.js.map
