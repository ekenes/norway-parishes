import{dc as e,dd as c,de as n,U as u}from"./index-BVCTOtrL.js";import{a as y}from"./WebMap-DM8CY0CO.js";import"./ColorBackground-DGu4OhzG.js";import"./CollectionFlattener-CMWhaSVr.js";import"./basemapUtils-DKGcOL8l.js";import"./TablesMixin-_MuJYK82.js";import"./MultiOriginJSONSupport-BXZzo0M_.js";import"./portalItemUtils-CUao5ph-.js";import"./interfaces-CL2NbQte.js";import"./TimeInfo-DJByDno4.js";import"./jsonContext-CqyuCUXU.js";import"./project-BCc69tiz.js";import"./FeatureLayer-BbRmUrlq.js";import"./commonProperties-DmZr01KJ.js";import"./FeatureLayerBase-Y2Aka3cI.js";import"./HeightModelInfo-D75wB90s.js";import"./featureLayerUtils-B0QOKcCv.js";import"./uuid-Cl5lrJ4c.js";import"./LayerFloorInfo-B9V4YR8l.js";import"./Relationship-B8VMX0ss.js";import"./serviceCapabilitiesUtils-omGOALqK.js";import"./editsZScale-CBZ1qtHx.js";import"./APIKeyMixin-BEV7oKel.js";import"./ArcGISService-COfEZmwR.js";import"./CustomParametersMixin-cSIktmqI.js";import"./EditBusLayer-CIjHQEfq.js";import"./FeatureEffectLayer-B34r9GVe.js";import"./FeatureEffect-D5w8bFDA.js";import"./FeatureReductionLayer-BswP6Ecs.js";import"./FeatureReductionSelection-CiVbu83E.js";import"./labelingInfo-Ck6NdHkS.js";import"./labelUtils-D4t8uaUh.js";import"./MD5-C9MwAd2G.js";import"./OperationalLayer-fijZ19TW.js";import"./OrderedLayer-fkPIRH_I.js";import"./OrderByInfo-DjAoB8Q5.js";import"./PortalLayer-BKA_-9U3.js";import"./RefreshableLayer-CyLwmdJQ.js";import"./TemporalLayer-B2fv0pZb.js";import"./FeatureTemplate-B3chx-cI.js";import"./FeatureType--4HuUDmC.js";import"./fieldProperties-BQKVfvvj.js";import"./versionUtils-BHV9SW6u.js";import"./styleUtils-IYGHFe8x.js";import"./popupUtils-B0sP_MKD.js";import"./AlphaCutoff-UcccL64p.js";import"./NetworkElement-DOJn135E.js";async function at(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,f:"json"}),...p}),s=`${i.path}/trace`;return u(s,m).then(a=>f(a))}async function et(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,async:!0,f:"json"}),...p}),s=`${i.path}/trace`,{data:a}=await u(s,m);return a.statusUrl}function f(o){const{data:t}=o;return y.fromJSON(t.traceResults)}export{et as submitTraceJob,at as trace};
//# sourceMappingURL=trace-CDT_ZBvx.js.map
