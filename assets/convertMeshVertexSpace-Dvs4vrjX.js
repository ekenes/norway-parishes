import{w as s,I as m,b7 as p}from"./index-Club40b3.js";import{p as n}from"./MeshVertexAttributes-CeE3R2Xo.js";import{B as a}from"./vertexSpaceConversion-BGrOVcyV.js";import"./mat3-DrMmd9ov.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-Aogwsubb.js";import"./spatialReferenceEllipsoidUtils-Bn5mK_Rv.js";import"./computeTranslationToOriginAndRotation-h-7E_X_V.js";import"./projectPointToVector-DnOU-ij9.js";import"./meshVertexSpaceUtils-D6nNPPQ9.js";import"./MeshLocalVertexSpace-ByQayPtb.js";import"./vec3-Cf933MCZ.js";import"./BufferView-BPSRUvGH.js";import"./vec4-Bn_0q4s2.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
//# sourceMappingURL=convertMeshVertexSpace-Dvs4vrjX.js.map
