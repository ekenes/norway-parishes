{"version":3,"file":"index-50eeb4c2-CIKg-tFz.js","sources":["../../node_modules/@esri/calcite-components/dist/esm/index-50eeb4c2.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\n * v2.13.2\n */\nimport { timeZones } from './time-zones-2baacc2d.js';\nimport { extractRegion, global } from './region-ffaa69eb.js';\nimport './index-p4VH55K1-b928be86.js';\n\nconst now = new Date();\nconst startDate = now.toISOString();\nconst daysInYear = 365;\nconst groupDateRange = daysInYear;\nconst defaultGroupingOptions = {\n    groupDateRange,\n    startDate,\n};\n\nconst _getDates = (startDate, numberDays, dateEngine) => {\n    const dateArray = [];\n    let date = dateEngine.create(startDate);\n    for (let i = 0; i <= numberDays; i++) {\n        date = dateEngine.increase(date);\n        dateArray.push(dateEngine.formatToIsoDateString(date));\n    }\n    return dateArray;\n};\nconst generateTimeZoneMetadata = (timeZoneItems, startDate, numberDays, dateEngine) => {\n    const processedDates = new Map();\n    const theDates = _getDates(startDate, numberDays, dateEngine);\n    return timeZoneItems.map((tzItem) => {\n        const { label } = tzItem;\n        const continent = extractRegion(label);\n        const dates = theDates.map((date) => {\n            const key = `${date}-${label}`;\n            let utc = processedDates.get(key);\n            if (utc) {\n                return utc;\n            }\n            utc = dateEngine.isoToTimeZone(date, label);\n            processedDates.set(key, utc);\n            return utc;\n        });\n        return {\n            ...tzItem,\n            continent,\n            isRegularContinent: continent !== global,\n            dates,\n        };\n    });\n};\nconst compareDateArrs = (array1, array2, dateEngine) => array1.length === array2.length &&\n    array1.every((value, index) => dateEngine.same(value, array2[index]));\nconst getGroupLabelTimeZoneIndices = (rawTZs, max = 5) => {\n    const shrinkedTzs = rawTZs.filter(({ label }) => extractRegion(label) !== global);\n    if (shrinkedTzs.length === 0) {\n        return [0];\n    }\n    const validLabels = shrinkedTzs.map((tz) => rawTZs.indexOf(tz));\n    return equallyDistributedSampling(validLabels, max);\n};\nfunction equallyDistributedSampling(items, maxItems = 5) {\n    const totalItems = items.length;\n    if (totalItems <= maxItems) {\n        return items;\n    }\n    const numberItemsToSelect = Math.min(totalItems - 2, maxItems - 2);\n    const stepSize = (totalItems - 1) / (numberItemsToSelect + 1);\n    return [\n        items[0],\n        ...Array.from({ length: numberItemsToSelect }, (_, i) => items[Math.round((i + 1) * stepSize)]),\n        items[totalItems - 1],\n    ];\n}\n\nasync function groupByOffset(options) {\n    const { groupDateRange, startDate, dateEngine } = {\n        ...defaultGroupingOptions,\n        ...options,\n    };\n    const grouping = [];\n    if (!dateEngine) {\n        throw new Error('dateEngine is required');\n    }\n    const timeZoneItems = timeZones.map((tz) => ({ label: tz }));\n    const timeZoneMetadata = generateTimeZoneMetadata(timeZoneItems, startDate, groupDateRange, dateEngine);\n    // We traverse the mappedDB and see if we find matches by comparing each set\n    // of transformed date for that specific TZ.\n    for (const tzMetadatumI of timeZoneMetadata) {\n        const { label, continent, dates } = tzMetadatumI;\n        if (tzMetadatumI.visited) {\n            continue;\n        }\n        tzMetadatumI.visited = true;\n        const newGroup = {\n            labelIdx: [],\n            tzs: [{ label }],\n        };\n        for (const tzMetadatumJ of timeZoneMetadata.filter((_) => !_.visited)) {\n            const { label: labelJ, continent: continentJ, isRegularContinent: isRegularContinentJ, dates: datesJ, } = tzMetadatumJ;\n            // We define a matching TZ by:\n            // 1) if both continents match (avoid grouping Antarctica with anything else)\n            // 2) if the transformed dates match in both TZs\n            if ((continent === continentJ || !isRegularContinentJ) &&\n                compareDateArrs(dates, datesJ, dateEngine)) {\n                const tzItem = { label: labelJ };\n                newGroup.tzs.push(tzItem);\n                tzMetadatumJ.visited = true;\n            }\n        }\n        grouping.push(newGroup);\n    }\n    // Now that we have a group, we want an easy way to find a fitting label for the group\n    // which is defined as the list of the most-common 7 cities, shown in alphabetical order\n    return grouping\n        .map((group) => {\n        group.tzs = group.tzs.sort((a, b) => a.label.localeCompare(b.label));\n        return {\n            labelTzIdx: getGroupLabelTimeZoneIndices(group.tzs, 7),\n            tzs: group.tzs.map((_) => _.label),\n        };\n    })\n        .sort((a, b) => b.tzs.length - a.tzs.length);\n}\n\nexport { groupByOffset };\n\n//# sourceMappingURL=index-50eeb4c2.js.map"],"names":["now","startDate","daysInYear","groupDateRange","defaultGroupingOptions","_getDates","numberDays","dateEngine","dateArray","date","i","generateTimeZoneMetadata","timeZoneItems","processedDates","theDates","tzItem","label","continent","extractRegion","dates","key","utc","global","compareDateArrs","array1","array2","value","index","getGroupLabelTimeZoneIndices","rawTZs","max","shrinkedTzs","validLabels","tz","equallyDistributedSampling","items","maxItems","totalItems","numberItemsToSelect","stepSize","_","groupByOffset","options","grouping","timeZones","timeZoneMetadata","tzMetadatumI","newGroup","tzMetadatumJ","labelJ","continentJ","isRegularContinentJ","datesJ","group","b","a"],"mappings":"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","x_google_ignoreList":[0]}