{"version":3,"file":"utils-f1cd2770-BzplK9VO.js","sources":["../../node_modules/@esri/calcite-components/dist/esm/utils-f1cd2770.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\n * v2.13.2\n */\nimport { a as getAssetPath } from './index-abe3b66e.js';\nimport { n as numberStringFormatter, g as getSupportedLocale } from './locale-60f8ca58.js';\n\n/**\n * Check if date is within a min and max\n *\n * @param date\n * @param min\n * @param max\n */\nfunction inRange(date, min, max) {\n    if (!date) {\n        return;\n    }\n    const time = date.getTime();\n    const afterMin = !(min instanceof Date) || time >= min.getTime();\n    const beforeMax = !(max instanceof Date) || time <= max.getTime();\n    return afterMin && beforeMax;\n}\n/**\n * Ensures date is within range,\n * returns min or max if out of bounds\n *\n * @param date\n * @param min\n * @param max\n */\nfunction dateFromRange(date, min, max) {\n    if (!(date instanceof Date)) {\n        return null;\n    }\n    const time = date.getTime();\n    const beforeMin = min instanceof Date && time < min.getTime();\n    const afterMax = max instanceof Date && time > max.getTime();\n    if (beforeMin) {\n        return min;\n    }\n    if (afterMax) {\n        return max;\n    }\n    return date;\n}\n/**\n * Parse an iso8601 string (YYYY-mm-dd) into a valid date.\n * TODO: handle time when time of day UI is added\n *\n * @param iso8601\n * @param isEndDate\n */\nfunction dateFromISO(iso8601, isEndDate = false) {\n    if (iso8601 instanceof Date) {\n        return iso8601;\n    }\n    if (!iso8601 || typeof iso8601 !== \"string\") {\n        return null;\n    }\n    const d = iso8601.split(/[: T-]/).map(parseFloat);\n    const date = new Date(d[0], (d[1] || 1) - 1, d[2] || 1);\n    date.setFullYear(d[0]);\n    if (isNaN(date.getTime())) {\n        throw new Error(`Invalid ISO 8601 date: \"${iso8601}\"`);\n    }\n    if (isEndDate) {\n        return setEndOfDay(date);\n    }\n    return date;\n}\n/**\n * Parse a localized date string into a valid Date.\n * return false if date is invalid, or out of range\n *\n * @param value\n * @param localeData\n */\nfunction dateFromLocalizedString(value, localeData) {\n    if (!localeData) {\n        return null;\n    }\n    const { separator } = localeData;\n    const parts = parseDateString(value, localeData);\n    const { day, month } = parts;\n    const year = parseCalendarYear(parts.year, localeData);\n    const date = new Date(year, month, day);\n    date.setFullYear(year);\n    const validDay = day > 0;\n    const validMonth = month > -1;\n    const validDate = !isNaN(date.getTime());\n    const validLength = value.split(separator).filter((c) => c).length > 2;\n    const validYear = year.toString().length > 0;\n    if (validDay && validMonth && validDate && validLength && validYear) {\n        return date;\n    }\n    return null;\n}\nfunction parseCalendarYear(year, localeData) {\n    return processCalendarYear(year, localeData, \"read\");\n}\nfunction formatCalendarYear(year, localeData) {\n    return processCalendarYear(year, localeData, \"write\");\n}\nfunction processCalendarYear(year, localeData, mode) {\n    if (localeData[\"default-calendar\"] !== \"buddhist\") {\n        return year;\n    }\n    const BUDDHIST_CALENDAR_YEAR_OFFSET = 543;\n    const yearOffset = BUDDHIST_CALENDAR_YEAR_OFFSET * (mode === \"read\" ? -1 : 1);\n    return year + yearOffset;\n}\n/**\n * Retrieve day, month, and year strings from a localized string\n *\n * @param string\n * @param localeData\n */\nfunction datePartsFromLocalizedString(string, localeData) {\n    const { separator, unitOrder } = localeData;\n    const order = getOrder(unitOrder);\n    const values = string.split(separator).map((part) => numberStringFormatter.delocalize(part));\n    const day = values[order.indexOf(\"d\")];\n    const month = values[order.indexOf(\"m\")];\n    const year = values[order.indexOf(\"y\")];\n    return { day, month, year };\n}\n/**\n * Return the date portion in local time of a Date object in ISO 8601 format (YYYY-MM-DD)\n *\n * @param date\n */\nfunction dateToISO(date) {\n    if (date instanceof Date) {\n        const month = String(date.getMonth() + 1).padStart(2, \"0\");\n        const day = String(date.getDate()).padStart(2, \"0\");\n        const year = String(date.getFullYear()).padStart(4, \"0\");\n        return `${year}-${month}-${day}`;\n    }\n    return \"\";\n}\n/**\n * Retrieve day, month, and year strings from a ISO string (YYYY-mm-dd)\n *\n * @param string\n * @param isoDate\n */\nfunction datePartsFromISO(isoDate) {\n    const dateParts = isoDate.split(\"-\");\n    return { day: dateParts[2], month: dateParts[1], year: dateParts[0] };\n}\n/**\n * Check if two dates are the same day, month, year\n *\n * @param d1\n * @param d2\n */\nfunction sameDate(d1, d2) {\n    return (d1 instanceof Date &&\n        d2 instanceof Date &&\n        d1.getDate() === d2.getDate() &&\n        d1.getMonth() === d2.getMonth() &&\n        d1.getFullYear() === d2.getFullYear());\n}\n/**\n * Get a date one month in the past\n *\n * @param date\n */\nfunction prevMonth(date) {\n    const month = date.getMonth();\n    const nextDate = new Date(date);\n    nextDate.setMonth(month - 1);\n    // date doesn't exist in new month, use last day\n    if (month === nextDate.getMonth()) {\n        return new Date(date.getFullYear(), month, 0);\n    }\n    return nextDate;\n}\n/**\n * Get a date one month in the future\n *\n * @param date\n */\nfunction nextMonth(date) {\n    const month = date.getMonth();\n    const nextDate = new Date(date);\n    nextDate.setMonth(month + 1);\n    // date doesn't exist in new month, use last day\n    if ((month + 2) % 7 === nextDate.getMonth() % 7) {\n        return new Date(date.getFullYear(), month + 2, 0);\n    }\n    return nextDate;\n}\n/**\n * Parse numeric units for day, month, and year from a localized string\n * month starts at 0 (can pass to date constructor)\n * can return values as number or string\n *\n * @param string\n * @param localeData\n */\nfunction parseDateString(string, localeData) {\n    const { day, month, year } = datePartsFromLocalizedString(string, localeData);\n    return {\n        day: parseInt(day),\n        month: parseInt(month) - 1, // this subtracts by 1 because the month in the Date constructor is zero-based https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth\n        year: parseInt(year),\n    };\n}\n/**\n * Based on the unitOrder string, find order of month, day, and year for locale\n *\n * @param unitOrder\n */\nfunction getOrder(unitOrder) {\n    const signifiers = [\"d\", \"m\", \"y\"];\n    const order = unitOrder.toLowerCase();\n    return signifiers.sort((a, b) => order.indexOf(a) - order.indexOf(b));\n}\n/**\n * Get number of days between two dates\n *\n * @param date1\n * @param date2\n */\nfunction getDaysDiff(date1, date2) {\n    const ts1 = date1.getTime();\n    const ts2 = date2.getTime();\n    return (ts1 - ts2) / (1000 * 3600 * 24);\n}\n/**\n * Set time of the day to the end.\n *\n * @param {Date} date Date.\n * @returns {Date} Date with time set to end of day .\n */\nfunction setEndOfDay(date) {\n    date.setHours(23, 59, 59, 999);\n    return date;\n}\n\n/**\n * CLDR cache.\n * Exported for testing purposes.\n *\n * @private\n */\nconst translationCache = {};\n/**\n * CLDR request cache.\n * Exported for testing purposes.\n *\n * @private\n */\nconst requestCache = {};\n/**\n * Fetch calendar data for a given locale from list of supported languages\n *\n * @param lang\n * @public\n */\nasync function getLocaleData(lang) {\n    const locale = getSupportedLocale(lang);\n    if (translationCache[locale]) {\n        return translationCache[locale];\n    }\n    if (!requestCache[locale]) {\n        requestCache[locale] = fetch(getAssetPath(`./assets/date-picker/nls/${locale}.json`))\n            .then((resp) => resp.json())\n            .catch(() => {\n            console.error(`Translations for \"${locale}\" not found or invalid, falling back to english`);\n            return getLocaleData(\"en\");\n        });\n    }\n    const data = await requestCache[locale];\n    translationCache[locale] = data;\n    return data;\n}\n/**\n *  Maps value to valueAsDate\n *\n * @param value\n */\nfunction getValueAsDateRange(value) {\n    return value.map((v, index) => dateFromISO(v, index === 1));\n}\n\nexport { datePartsFromLocalizedString as a, dateFromLocalizedString as b, dateToISO as c, datePartsFromISO as d, dateFromISO as e, dateFromRange as f, getValueAsDateRange as g, getLocaleData as h, inRange as i, getDaysDiff as j, sameDate as k, getOrder as l, formatCalendarYear as m, nextMonth as n, parseCalendarYear as o, prevMonth as p, setEndOfDay as s };\n\n//# sourceMappingURL=utils-f1cd2770.js.map"],"names":["inRange","date","min","max","time","afterMin","beforeMax","dateFromRange","beforeMin","afterMax","dateFromISO","iso8601","isEndDate","d","setEndOfDay","dateFromLocalizedString","value","localeData","separator","parts","parseDateString","day","month","year","parseCalendarYear","validDay","validMonth","validDate","validLength","c","validYear","processCalendarYear","formatCalendarYear","mode","yearOffset","datePartsFromLocalizedString","string","unitOrder","order","getOrder","values","part","numberStringFormatter","dateToISO","datePartsFromISO","isoDate","dateParts","sameDate","d1","d2","prevMonth","nextDate","nextMonth","signifiers","a","b","getDaysDiff","date1","date2","ts1","ts2","translationCache","requestCache","getLocaleData","lang","locale","getSupportedLocale","getAssetPath","resp","data","getValueAsDateRange","v","index"],"mappings":"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","x_google_ignoreList":[0]}