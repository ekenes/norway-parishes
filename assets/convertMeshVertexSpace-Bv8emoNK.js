import{w as s,I as m,b7 as p}from"./index-BVCTOtrL.js";import{p as n}from"./MeshVertexAttributes-Cm2J-y3O.js";import{B as a}from"./vertexSpaceConversion-Bw3nFZ1b.js";import"./mat3-CdZywI2d.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-CbpHz7s3.js";import"./spatialReferenceEllipsoidUtils-CXi-_rQt.js";import"./computeTranslationToOriginAndRotation-DQPvecWW.js";import"./projectPointToVector-CJgBHOc3.js";import"./meshVertexSpaceUtils-BmlCk7w5.js";import"./MeshLocalVertexSpace-ClY3BY-S.js";import"./vec3-FRbDFUo5.js";import"./BufferView-CTVif2ux.js";import"./vec4-2r7DNi69.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
//# sourceMappingURL=convertMeshVertexSpace-Bv8emoNK.js.map
