{"version":3,"file":"form-8ec29459-yBavNmMH.js","sources":["../../node_modules/@esri/calcite-components/dist/esm/form-8ec29459.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\n * v2.13.2\n */\nimport { h } from './index-abe3b66e.js';\nimport { q as queryElementRoots, a as closestElementCrossShadowBoundary } from './dom-b6dedd88.js';\n\n/**\n * Any form <Component> with a `calcite<Component>Input` event needs to be included in this array.\n */\nconst componentsWithInputEvent = [\n    \"calcite-input\",\n    \"calcite-input-number\",\n    \"calcite-input-text\",\n    \"calcite-text-area\",\n];\n/**\n * Get the event name to listen for that, when emitted, will clear the\n * validation message that displays after form submission. Only validation\n * messages that are set by the browser will be cleared. If a user sets\n * validationMessage to a custom value, they are responsible for clearing it.\n *\n * Exported for testing purposes.\n *\n * @param componentTag the tag of the component, e.g. \"calcite-input\"\n * @returns the event name\n */\nfunction getClearValidationEventName(componentTag) {\n    const componentTagCamelCase = componentTag\n        .split(\"-\")\n        .map((part, index) => index === 0 ? part : `${part[0].toUpperCase()}${part.slice(1)}`)\n        .join(\"\");\n    const clearValidationEvent = `${componentTagCamelCase}${componentsWithInputEvent.includes(componentTag) ? \"Input\" : \"Change\"}`;\n    return clearValidationEvent;\n}\n/**\n * Exported for testing purposes.\n */\nconst hiddenFormInputSlotName = \"hidden-form-input\";\nfunction isCheckable(component) {\n    return \"checked\" in component;\n}\nconst onFormResetMap = new WeakMap();\nconst formComponentSet = new WeakSet();\n/**\n * This helps determine if our form component is part of a composite form-associated component.\n *\n * @param form\n * @param formComponentEl\n */\nfunction hasRegisteredFormComponentParent(form, formComponentEl) {\n    // if we have a parent component using the form ID attribute, we assume it is form-associated\n    const hasParentComponentWithFormIdSet = closestElementCrossShadowBoundary(formComponentEl.parentElement, \"[form]\");\n    if (hasParentComponentWithFormIdSet) {\n        return true;\n    }\n    // we use events as a way to test for nested form-associated components across shadow bounds\n    const formComponentRegisterEventName = \"calciteInternalFormComponentRegister\";\n    let hasRegisteredFormComponentParent = false;\n    form.addEventListener(formComponentRegisterEventName, (event) => {\n        hasRegisteredFormComponentParent = event\n            .composedPath()\n            .some((element) => formComponentSet.has(element));\n        event.stopPropagation();\n    }, { once: true });\n    formComponentEl.dispatchEvent(new CustomEvent(formComponentRegisterEventName, {\n        bubbles: true,\n        composed: true,\n    }));\n    return hasRegisteredFormComponentParent;\n}\nfunction displayValidationMessage(component, { status, message, icon }) {\n    if (\"status\" in component) {\n        component.status = status;\n    }\n    if (\"validationIcon\" in component && typeof component.validationIcon !== \"string\") {\n        component.validationIcon = icon;\n    }\n    if (\"validationMessage\" in component && !component.validationMessage) {\n        component.validationMessage = message;\n    }\n}\nfunction getValidationComponent(el) {\n    // radio-button is formAssociated, but the validation props are on the parent group\n    if (el.nodeName === \"CALCITE-RADIO-BUTTON\") {\n        return closestElementCrossShadowBoundary(el, \"calcite-radio-button-group\");\n    }\n    return el;\n}\nconst invalidEvent = new CustomEvent(\"calciteInvalid\", { bubbles: true, composed: true });\nfunction invalidHandler(event) {\n    // target is the hidden input, which is slotted in the actual form component\n    const hiddenInput = event?.target;\n    const hiddenInputMessage = hiddenInput?.validationMessage;\n    // not necessarily a calcite-input, but we don't have an HTMLCalciteFormAssociatedElement type\n    const formComponent = getValidationComponent(hiddenInput?.parentElement);\n    if (!formComponent) {\n        return;\n    }\n    const componentTag = formComponent?.nodeName?.toLowerCase();\n    const componentTagParts = componentTag?.split(\"-\");\n    if (componentTagParts.length < 2 || componentTagParts[0] !== \"calcite\") {\n        return;\n    }\n    // prevent the browser from showing the native validation popover\n    event?.preventDefault();\n    if (\"validity\" in formComponent) {\n        formComponent.validity = hiddenInput?.validity;\n    }\n    // dispatch a \"calciteInvalid\" so users can set custom validation messages\n    formComponent.dispatchEvent(invalidEvent);\n    displayValidationMessage(formComponent, {\n        message: hiddenInputMessage,\n        icon: true,\n        status: \"invalid\",\n    });\n    const clearValidationEvent = getClearValidationEventName(componentTag);\n    formComponent.addEventListener(clearValidationEvent, () => {\n        if (\"status\" in formComponent) {\n            formComponent.status = \"idle\";\n        }\n        if (\"validationIcon\" in formComponent && !formComponent.validationIcon) {\n            formComponent.validationIcon = false;\n        }\n        if (\"validationMessage\" in formComponent &&\n            formComponent.validationMessage === hiddenInputMessage) {\n            formComponent.validationMessage = \"\";\n        }\n        if (\"validity\" in formComponent) {\n            formComponent.validity = hiddenInput?.validity;\n        }\n    }, { once: true });\n}\n/**\n * Helper to submit a form.\n *\n * @param component\n * @returns true if its associated form was submitted, false otherwise.\n */\nfunction submitForm(component) {\n    const { formEl } = component;\n    if (!formEl) {\n        return false;\n    }\n    formEl.addEventListener(\"invalid\", invalidHandler, true);\n    formEl.requestSubmit();\n    formEl.removeEventListener(\"invalid\", invalidHandler, true);\n    requestAnimationFrame(() => {\n        const invalidEls = formEl.querySelectorAll(\"[status=invalid]\");\n        // focus the first invalid element that has a validation message\n        for (const el of invalidEls) {\n            if (el?.validationMessage) {\n                el?.setFocus();\n                break;\n            }\n        }\n    });\n    return true;\n}\n/**\n * Helper to reset a form.\n *\n * @param component\n */\nfunction resetForm(component) {\n    component.formEl?.reset();\n}\n/**\n * Helper to set up form interactions on connectedCallback.\n *\n * @param component\n */\nfunction connectForm(component) {\n    const { el, value } = component;\n    const associatedForm = findAssociatedForm(component);\n    if (!associatedForm || hasRegisteredFormComponentParent(associatedForm, el)) {\n        return;\n    }\n    component.formEl = associatedForm;\n    component.defaultValue = value;\n    if (isCheckable(component)) {\n        component.defaultChecked = component.checked;\n    }\n    const boundOnFormReset = (component.onFormReset || onFormReset).bind(component);\n    associatedForm.addEventListener(\"reset\", boundOnFormReset);\n    onFormResetMap.set(component.el, boundOnFormReset);\n    formComponentSet.add(el);\n}\n/**\n * Utility method to find a form-component's associated form element.\n *\n * @param component\n */\nfunction findAssociatedForm(component) {\n    const { el, form } = component;\n    return form\n        ? queryElementRoots(el, { id: form })\n        : closestElementCrossShadowBoundary(el, \"form\");\n}\nfunction onFormReset() {\n    if (\"status\" in this) {\n        this.status = \"idle\";\n    }\n    if (\"validationIcon\" in this) {\n        this.validationIcon = false;\n    }\n    if (\"validationMessage\" in this) {\n        this.validationMessage = \"\";\n    }\n    if (isCheckable(this)) {\n        this.checked = this.defaultChecked;\n        return;\n    }\n    this.value = this.defaultValue;\n}\n/**\n * Helper to tear down form interactions on disconnectedCallback.\n *\n * @param component\n */\nfunction disconnectForm(component) {\n    const { el, formEl } = component;\n    if (!formEl) {\n        return;\n    }\n    const boundOnFormReset = onFormResetMap.get(el);\n    formEl.removeEventListener(\"reset\", boundOnFormReset);\n    onFormResetMap.delete(el);\n    component.formEl = null;\n    formComponentSet.delete(el);\n}\n/**\n * Helper for setting the default value on initialization after connectedCallback.\n *\n * Note that this is only needed if the default value cannot be determined on connectedCallback.\n *\n * @param component\n * @param value\n */\nfunction afterConnectDefaultValueSet(component, value) {\n    component.defaultValue = value;\n}\nconst internalHiddenInputInputEvent = \"calciteInternalHiddenInputInput\";\nconst hiddenInputInputHandler = (event) => {\n    event.target.dispatchEvent(new CustomEvent(internalHiddenInputInputEvent, { bubbles: true }));\n};\nconst removeHiddenInputChangeEventListener = (input) => input.removeEventListener(\"input\", hiddenInputInputHandler);\n/**\n * Helper for maintaining a form-associated's hidden input in sync with the component.\n *\n * Based on Ionic's approach: https://github.com/ionic-team/ionic-framework/blob/e4bf052794af9aac07f887013b9250d2a045eba3/core/src/utils/helpers.ts#L198\n *\n * @param component\n */\nfunction syncHiddenFormInput(component) {\n    const { el, formEl, name, value } = component;\n    const { ownerDocument } = el;\n    const inputs = el.querySelectorAll(`input[slot=\"${hiddenFormInputSlotName}\"]`);\n    if (!formEl || !name) {\n        inputs.forEach((input) => {\n            removeHiddenInputChangeEventListener(input);\n            input.remove();\n        });\n        return;\n    }\n    const values = Array.isArray(value) ? value : [value];\n    const extra = [];\n    const seen = new Set();\n    inputs.forEach((input) => {\n        const valueMatch = values.find((val) => \n        /* intentional non-strict equality check */\n        val == input.value);\n        if (valueMatch != null) {\n            seen.add(valueMatch);\n            defaultSyncHiddenFormInput(component, input, valueMatch);\n        }\n        else {\n            extra.push(input);\n        }\n    });\n    let docFrag;\n    values.forEach((value) => {\n        if (seen.has(value)) {\n            return;\n        }\n        let input = extra.pop();\n        if (!input) {\n            input = ownerDocument.createElement(\"input\");\n            input.slot = hiddenFormInputSlotName;\n        }\n        if (!docFrag) {\n            docFrag = ownerDocument.createDocumentFragment();\n        }\n        docFrag.append(input);\n        // emits when hidden input is autofilled\n        input.addEventListener(\"input\", hiddenInputInputHandler);\n        defaultSyncHiddenFormInput(component, input, value);\n    });\n    if (docFrag) {\n        el.append(docFrag);\n    }\n    extra.forEach((input) => {\n        removeHiddenInputChangeEventListener(input);\n        input.remove();\n    });\n}\nfunction defaultSyncHiddenFormInput(component, input, value) {\n    const { defaultValue, disabled, form, name, required } = component;\n    // keep in sync to prevent losing reset value\n    input.defaultValue = defaultValue;\n    input.disabled = disabled;\n    input.name = name;\n    input.required = required;\n    input.tabIndex = -1;\n    // we set the attr as the prop is read-only\n    if (form) {\n        input.setAttribute(\"form\", form);\n    }\n    else {\n        input.removeAttribute(\"form\");\n    }\n    if (isCheckable(component)) {\n        input.checked = component.checked;\n        // keep in sync to prevent losing reset value\n        input.defaultChecked = component.defaultChecked;\n        // heuristic to support default/on mode from https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on\n        input.value = component.checked ? value || \"on\" : \"\";\n    }\n    else {\n        input.value = value || \"\";\n    }\n    component.syncHiddenFormInput?.(input);\n    const validationComponent = getValidationComponent(component.el);\n    if (validationComponent && \"validity\" in validationComponent) {\n        // mutate the component's validity object to prevent a rerender\n        // https://stenciljs.com/docs/properties#mutable-arrays-and-objects\n        for (const key in { ...input?.validity }) {\n            validationComponent.validity[key] = input.validity[key];\n        }\n    }\n}\n/**\n * Helper to render the slot for form-associated component's hidden input.\n *\n * If the component has a default slot, this must be placed at the bottom of the component's root container to ensure it is the last child.\n *\n * render(): VNode {\n *   <Host>\n *     <div class={CSS.container}>\n *     // ...\n *     <HiddenFormInputSlot component={this} />\n *     </div>\n *   </Host>\n * }\n *\n * Note that the hidden-form-input Sass mixin must be added to the component's style to apply specific styles.\n *\n * @param root0\n * @param root0.component\n */\nconst HiddenFormInputSlot = ({ component, }) => {\n    syncHiddenFormInput(component);\n    return h(\"slot\", { name: hiddenFormInputSlotName });\n};\n\nexport { HiddenFormInputSlot as H, afterConnectDefaultValueSet as a, connectForm as c, disconnectForm as d, findAssociatedForm as f, internalHiddenInputInputEvent as i, resetForm as r, submitForm as s };\n\n//# sourceMappingURL=form-8ec29459.js.map"],"names":["componentsWithInputEvent","getClearValidationEventName","componentTag","part","index","hiddenFormInputSlotName","isCheckable","component","onFormResetMap","formComponentSet","hasRegisteredFormComponentParent","form","formComponentEl","closestElementCrossShadowBoundary","formComponentRegisterEventName","event","element","displayValidationMessage","status","message","icon","getValidationComponent","el","invalidEvent","invalidHandler","hiddenInput","hiddenInputMessage","formComponent","_a","componentTagParts","clearValidationEvent","submitForm","formEl","invalidEls","resetForm","connectForm","value","associatedForm","findAssociatedForm","boundOnFormReset","onFormReset","queryElementRoots","disconnectForm","afterConnectDefaultValueSet","internalHiddenInputInputEvent","hiddenInputInputHandler","removeHiddenInputChangeEventListener","input","syncHiddenFormInput","name","ownerDocument","inputs","values","extra","seen","valueMatch","val","defaultSyncHiddenFormInput","docFrag","defaultValue","disabled","required","validationComponent","key","HiddenFormInputSlot","h"],"mappings":"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","x_google_ignoreList":[0]}