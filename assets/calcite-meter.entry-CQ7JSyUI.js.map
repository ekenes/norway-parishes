{"version":3,"file":"calcite-meter.entry-CQ7JSyUI.js","sources":["../../node_modules/@esri/calcite-components/dist/esm/calcite-meter.entry.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\n * v2.13.2\n */\nimport { r as registerInstance, h, H as Host, g as getElement } from './index-abe3b66e.js';\nimport { s as setUpLoadableComponent, a as setComponentLoaded } from './loadable-13e9ffb2.js';\nimport { a as afterConnectDefaultValueSet, c as connectForm, d as disconnectForm } from './form-8ec29459.js';\nimport { g as getSupportedLocale, n as numberStringFormatter, c as connectLocalized, d as disconnectLocalized } from './locale-60f8ca58.js';\nimport { v as intersects } from './dom-b6dedd88.js';\nimport { c as createObserver } from './observers-9c166451.js';\nimport './browser-618ac057.js';\nimport './key-3ee05994.js';\nimport './guid-9c230b6a.js';\nimport './resources-a23d2491.js';\n\nconst CSS = {\n    container: \"container\",\n    fill: \"fill\",\n    stepLine: \"step-line\",\n    label: \"label\",\n    labelHidden: \"label-hidden\",\n    labelRange: \"label-range\",\n    labelValue: \"label-value\",\n    unitLabel: \"unit-label\",\n    stepsVisible: \"steps-visible\",\n    valueVisible: \"value-visible\",\n    success: \"fill-success\",\n    warning: \"fill-warning\",\n    danger: \"fill-danger\",\n};\n\nconst meterCss = \":host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host([hidden]){display:none}[hidden]{display:none}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}.interaction-container{display:contents}:host{display:flex;--calcite-meter-space-internal:0.125rem;--calcite-meter-height-internal:1rem;--calcite-meter-font-size-internal:var(--calcite-font-size--1)}:host([scale=s]){--calcite-meter-height-internal:0.75rem;--calcite-meter-font-size-internal:var(--calcite-font-size--2)}:host([scale=l]){--calcite-meter-height-internal:1.5rem;--calcite-meter-font-size-internal:var(--calcite-font-size-0)}.container{position:relative;margin:0px;display:flex;inline-size:100%;align-items:center;block-size:var(--calcite-meter-height-internal);background-color:var(--calcite-color-foreground-2);border:1px solid var(--calcite-color-border-3);border-radius:var(--calcite-meter-height-internal)}.solid{border:1px solid var(--calcite-color-foreground-3);background-color:var(--calcite-color-foreground-3)}.outline{background-color:transparent}.value-visible{margin-block-start:1.5rem}.steps-visible{margin-block-end:1.5rem}.step-line{position:absolute;inset-block:0px;display:block;inline-size:var(--calcite-meter-space-internal);background-color:var(--calcite-color-border-3)}.label{position:absolute;font-size:var(--calcite-meter-font-size-internal)}.label-hidden{visibility:hidden;opacity:0}.label-value{inset-block-end:calc(100% + 0.5em);font-weight:var(--calcite-font-weight-bold);color:var(--calcite-color-text-1)}.label-range{color:var(--calcite-color-text-3);inset-block-start:calc(100% + 0.5em)}.unit-label{font-weight:var(--calcite-font-weight-medium);color:var(--calcite-color-text-3)}.label-value .unit-label{font-weight:var(--calcite-font-weight-bold);color:var(--calcite-color-text-2)}.fill{position:absolute;z-index:var(--calcite-z-index);display:block;background-color:var(--calcite-color-brand);transition-duration:150ms;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);inset-inline-start:var(--calcite-meter-space-internal);inset-block:var(--calcite-meter-space-internal);border-radius:var(--calcite-meter-height-internal);max-inline-size:calc(100% - var(--calcite-meter-space-internal) * 2);min-inline-size:calc(var(--calcite-meter-height-internal) - var(--calcite-meter-space-internal) * 2);transition-property:inline-size, background-color, box-shadow}.fill-danger{background-color:var(--calcite-color-status-danger)}.fill-success{background-color:var(--calcite-color-status-success)}.fill-warning{background-color:var(--calcite-color-status-warning)}.solid .fill{inset-block:0;inset-inline-start:0;max-inline-size:100%;min-inline-size:calc(var(--calcite-meter-height-internal));box-shadow:0 0 0 1px var(--calcite-color-brand)}.solid .fill-danger{box-shadow:0 0 0 1px var(--calcite-color-status-danger)}.solid .fill-success{box-shadow:0 0 0 1px var(--calcite-color-status-success)}.solid .fill-warning{box-shadow:0 0 0 1px var(--calcite-color-status-warning)}\";\nconst CalciteMeterStyle0 = meterCss;\n\nconst Meter = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.labelFlipMax = 0.8;\n        this.labelFlipProximity = 0.15;\n        this.maxPercent = 100;\n        this.minPercent = 0;\n        this.resizeObserver = createObserver(\"resize\", () => this.resizeHandler());\n        this.formatLabel = (value, labelType) => {\n            if (labelType === \"percent\") {\n                if (!this.percentFormatting) {\n                    const locale = getSupportedLocale(this.effectiveLocale);\n                    const formatter = new Intl.NumberFormat(locale, {\n                        useGrouping: this.groupSeparator,\n                        style: \"percent\",\n                    });\n                    this.percentFormatting = { formatter, locale };\n                }\n                return this.percentFormatting.formatter.format(value);\n            }\n            else {\n                numberStringFormatter.numberFormatOptions = {\n                    locale: this.effectiveLocale,\n                    numberingSystem: this.numberingSystem,\n                    useGrouping: this.groupSeparator,\n                };\n                return numberStringFormatter.localize(value.toString());\n            }\n        };\n        this.appearance = \"outline-fill\";\n        this.disabled = false;\n        this.fillType = \"range\";\n        this.form = undefined;\n        this.groupSeparator = false;\n        this.high = undefined;\n        this.label = undefined;\n        this.low = undefined;\n        this.max = 100;\n        this.min = 0;\n        this.name = undefined;\n        this.numberingSystem = undefined;\n        this.rangeLabels = false;\n        this.rangeLabelType = \"percent\";\n        this.scale = \"m\";\n        this.unitLabel = \"\";\n        this.value = undefined;\n        this.valueLabel = false;\n        this.valueLabelType = \"percent\";\n        this.currentPercent = undefined;\n        this.effectiveLocale = undefined;\n        this.highActive = undefined;\n        this.highPercent = undefined;\n        this.lowActive = undefined;\n        this.lowPercent = undefined;\n    }\n    handleRangeChange() {\n        this.calculateValues();\n        this.updateLabels();\n    }\n    handleLabelChange() {\n        this.updateLabels();\n    }\n    //--------------------------------------------------------------------------\n    //\n    //  Lifecycle\n    //\n    //--------------------------------------------------------------------------\n    async componentWillLoad() {\n        setUpLoadableComponent(this);\n        this.calculateValues();\n        afterConnectDefaultValueSet(this, this.value);\n    }\n    componentDidLoad() {\n        setComponentLoaded(this);\n        this.updateLabels();\n    }\n    connectedCallback() {\n        connectLocalized(this);\n        connectForm(this);\n        this.resizeObserver?.observe(this.el);\n    }\n    disconnectedCallback() {\n        disconnectLocalized(this);\n        disconnectForm(this);\n        this.resizeObserver?.disconnect();\n    }\n    //--------------------------------------------------------------------------\n    //\n    //  Private Methods\n    //\n    //--------------------------------------------------------------------------\n    resizeHandler() {\n        this.updateLabels();\n    }\n    updateLabels() {\n        if (this.valueLabelEl) {\n            this.determineValueLabelPosition();\n        }\n        if (this.rangeLabels) {\n            this.determineVisibleLabels();\n        }\n    }\n    calculateValues() {\n        const { min, max, low, high, value } = this;\n        const lowPercent = (100 * (low - min)) / (max - min);\n        const highPercent = (100 * (high - min)) / (max - min);\n        const currentPercent = (100 * (value - min)) / (max - min);\n        if (!low || low < min || low > high || low > max) {\n            this.low = min;\n        }\n        if (!high || high > max || high < low || high < min) {\n            this.high = max;\n        }\n        if (!value) {\n            this.value = min;\n        }\n        this.lowPercent = lowPercent;\n        this.highPercent = highPercent;\n        this.currentPercent = value ? currentPercent : 0;\n        this.lowActive = !!low && low > min && (!value || low > value) && (!high || low < high);\n        this.highActive =\n            !!high && min <= high && high < max && (!value || high > value) && (!low || high > low);\n    }\n    getMeterKindCssClass() {\n        const { low, high, min, max, value } = this;\n        const lowest = low ? low : min;\n        const highest = high ? high : max;\n        const aboveLowest = value >= lowest;\n        const belowLowest = value < lowest;\n        const aboveHighest = value >= highest;\n        const belowHighest = value < highest;\n        if (!value || (!low && belowHighest) || belowLowest) {\n            return CSS.success;\n        }\n        else if (aboveLowest && belowHighest) {\n            return CSS.warning;\n        }\n        else if (aboveHighest) {\n            return CSS.danger;\n        }\n        else {\n            return CSS.success;\n        }\n    }\n    intersects(el1, el2) {\n        return el1 && el2 && intersects(el1.getBoundingClientRect(), el2.getBoundingClientRect());\n    }\n    determineVisibleLabels() {\n        const { minLabelEl, lowLabelEl, highLabelEl, maxLabelEl } = this;\n        const highMaxOverlap = this.intersects(highLabelEl, maxLabelEl);\n        const lowHighOverlap = this.intersects(lowLabelEl, highLabelEl);\n        const lowMaxOverlap = this.intersects(lowLabelEl, maxLabelEl);\n        const minHighOverlap = this.intersects(minLabelEl, highLabelEl);\n        const minLowOverlap = this.intersects(minLabelEl, lowLabelEl);\n        const minMaxOverlap = this.intersects(minLabelEl, maxLabelEl);\n        const hiddenClass = CSS.labelHidden;\n        if (lowLabelEl) {\n            if (minLowOverlap || lowMaxOverlap || lowHighOverlap) {\n                lowLabelEl.classList.add(hiddenClass);\n            }\n            else {\n                lowLabelEl.classList.remove(hiddenClass);\n            }\n        }\n        if (highLabelEl) {\n            if (minHighOverlap || lowMaxOverlap || highMaxOverlap) {\n                highLabelEl.classList.add(hiddenClass);\n            }\n            else {\n                highLabelEl.classList.remove(hiddenClass);\n            }\n        }\n        if (minLabelEl && maxLabelEl) {\n            if (minMaxOverlap) {\n                maxLabelEl.classList.add(hiddenClass);\n            }\n            else {\n                maxLabelEl.classList.remove(hiddenClass);\n            }\n        }\n    }\n    determineValueLabelPosition() {\n        const { valueLabelEl, meterContainerEl, currentPercent } = this;\n        const valuePosition = currentPercent > 100 ? 100 : currentPercent > 0 ? currentPercent : 0;\n        const valueLabelWidth = valueLabelEl.getBoundingClientRect().width;\n        const containerWidth = meterContainerEl.getBoundingClientRect().width;\n        const labelWidthPercent = (100 * (valueLabelWidth - 0)) / (containerWidth - 0);\n        if (valuePosition + labelWidthPercent >= 100) {\n            valueLabelEl.style.insetInlineEnd = \"0%\";\n            valueLabelEl.style.removeProperty(\"inset-inline-start\");\n        }\n        else {\n            valueLabelEl.style.insetInlineStart = `${valuePosition}% `;\n            valueLabelEl.style.removeProperty(\"inset-inline-end\");\n        }\n    }\n    //--------------------------------------------------------------------------\n    //\n    //  Render Methods\n    //\n    //--------------------------------------------------------------------------\n    renderMeterFill() {\n        const { currentPercent, fillType } = this;\n        const kindClass = this.getMeterKindCssClass();\n        return (h(\"div\", { class: { [CSS.fill]: true, [kindClass]: fillType !== \"single\" }, style: { width: `${currentPercent}%` } }));\n    }\n    renderRangeLine(position) {\n        const style = { insetInlineStart: `${position}%` };\n        return h(\"div\", { class: CSS.stepLine, style: style });\n    }\n    renderValueLabel() {\n        const { currentPercent, valueLabelType, unitLabel, value } = this;\n        const label = this.formatLabel(valueLabelType === \"percent\" ? currentPercent / 100 : value || 0, valueLabelType);\n        return (h(\"div\", { class: { [CSS.label]: true, [CSS.labelValue]: true }, key: \"low-label-line\", ref: (el) => (this.valueLabelEl = el) }, label, unitLabel && valueLabelType !== \"percent\" && (h(\"span\", { class: CSS.unitLabel }, \"\\u00A0\", unitLabel))));\n    }\n    renderMinLabel() {\n        const { rangeLabelType, min, minPercent, unitLabel } = this;\n        const style = { insetInlineStart: `${minPercent}%` };\n        const labelMin = this.formatLabel(rangeLabelType === \"percent\" ? minPercent : min, rangeLabelType);\n        return (h(\"div\", { class: { [CSS.label]: true, [CSS.labelRange]: true }, key: \"min-label-line\", ref: (el) => (this.minLabelEl = el), style: style }, labelMin, unitLabel && rangeLabelType !== \"percent\" && (h(\"span\", { class: CSS.unitLabel }, \"\\u00A0\", unitLabel))));\n    }\n    renderLowLabel() {\n        const { rangeLabelType, low, lowPercent, highPercent, labelFlipProximity } = this;\n        const label = low\n            ? this.formatLabel(rangeLabelType === \"percent\" ? lowPercent / 100 : low, rangeLabelType)\n            : \"\";\n        const styleDefault = { insetInlineStart: `${lowPercent}%` };\n        const styleFlipped = { insetInlineEnd: `${100 - lowPercent}%` };\n        const style = (highPercent - lowPercent) / 100 < labelFlipProximity ? styleFlipped : styleDefault;\n        return (h(\"div\", { class: { [CSS.label]: true, [CSS.labelRange]: true }, key: \"low-label-line\", ref: (el) => (this.lowLabelEl = el), style: style }, label));\n    }\n    renderHighLabel() {\n        const { rangeLabelType, high, highPercent, labelFlipMax } = this;\n        const label = high\n            ? this.formatLabel(rangeLabelType === \"percent\" ? highPercent / 100 : high, rangeLabelType)\n            : \"\";\n        const styleDefault = { insetInlineStart: `${highPercent}%` };\n        const styleFlipped = { insetInlineEnd: `${100 - highPercent}%` };\n        const style = highPercent / 100 >= labelFlipMax ? styleFlipped : styleDefault;\n        return (h(\"div\", { class: { [CSS.label]: true, [CSS.labelRange]: true }, key: \"high-label-line\", ref: (el) => (this.highLabelEl = el), style: style }, label));\n    }\n    renderMaxLabel() {\n        const { rangeLabelType, max, maxPercent } = this;\n        const style = { insetInlineEnd: `${100 - maxPercent}%` };\n        const labelMax = this.formatLabel(rangeLabelType === \"percent\" ? maxPercent / 100 : max, rangeLabelType);\n        return (h(\"div\", { class: { [CSS.label]: true, [CSS.labelRange]: true }, key: \"max-label-line\", ref: (el) => (this.maxLabelEl = el), style: style }, labelMax));\n    }\n    render() {\n        const { appearance, currentPercent, highActive, highPercent, label, lowActive, lowPercent, max, maxPercent, min, minPercent, rangeLabels, rangeLabelType, unitLabel, value, valueLabel, valueLabelType, } = this;\n        const textPercentLabelWithPercent = this.formatLabel(currentPercent / 100, \"percent\");\n        const textUnitLabel = `${value} ${unitLabel}`;\n        const valueText = valueLabelType === \"percent\"\n            ? textPercentLabelWithPercent\n            : unitLabel\n                ? textUnitLabel\n                : undefined;\n        return (h(Host, { key: '66acf0e583d412615e49ef652baf9bfbb97dab39' }, h(\"div\", { key: 'eea0363c803ea0f4a1e2650aa543a4a0f2fe095c', \"aria-label\": label, \"aria-valuemax\": rangeLabelType === \"percent\" ? maxPercent : max, \"aria-valuemin\": rangeLabelType === \"percent\" ? minPercent : min, \"aria-valuenow\": valueLabelType === \"percent\" ? currentPercent : value, \"aria-valuetext\": valueText, class: {\n                [CSS.container]: true,\n                [CSS.stepsVisible]: rangeLabels,\n                [CSS.valueVisible]: valueLabel,\n                [appearance]: appearance !== \"outline-fill\",\n            }, ref: (el) => (this.meterContainerEl = el), role: \"meter\" }, this.renderMeterFill(), valueLabel && this.renderValueLabel(), lowActive && this.renderRangeLine(lowPercent), highActive && this.renderRangeLine(highPercent), rangeLabels && this.renderMinLabel(), rangeLabels && lowActive && this.renderLowLabel(), rangeLabels && highActive && this.renderHighLabel(), rangeLabels && this.renderMaxLabel())));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"min\": [\"handleRangeChange\"],\n        \"max\": [\"handleRangeChange\"],\n        \"low\": [\"handleRangeChange\"],\n        \"high\": [\"handleRangeChange\"],\n        \"value\": [\"handleRangeChange\"],\n        \"rangeLabels\": [\"handleLabelChange\"],\n        \"rangeLabelType\": [\"handleLabelChange\"],\n        \"unitLabel\": [\"handleLabelChange\"],\n        \"valueLabel\": [\"handleLabelChange\"],\n        \"valueLabelType\": [\"handleLabelChange\"]\n    }; }\n};\nMeter.style = CalciteMeterStyle0;\n\nexport { Meter as calcite_meter };\n\n//# sourceMappingURL=calcite-meter.entry.js.map"],"names":["CSS","meterCss","CalciteMeterStyle0","Meter","hostRef","registerInstance","createObserver","value","labelType","locale","getSupportedLocale","formatter","numberStringFormatter","setUpLoadableComponent","afterConnectDefaultValueSet","setComponentLoaded","connectLocalized","connectForm","_a","disconnectLocalized","disconnectForm","min","max","low","high","lowPercent","highPercent","currentPercent","lowest","highest","aboveLowest","belowLowest","aboveHighest","belowHighest","el1","el2","intersects","minLabelEl","lowLabelEl","highLabelEl","maxLabelEl","highMaxOverlap","lowHighOverlap","lowMaxOverlap","minHighOverlap","minLowOverlap","minMaxOverlap","hiddenClass","valueLabelEl","meterContainerEl","valuePosition","valueLabelWidth","containerWidth","labelWidthPercent","fillType","kindClass","position","style","valueLabelType","unitLabel","label","el","rangeLabelType","minPercent","labelMin","labelFlipProximity","styleDefault","styleFlipped","labelFlipMax","maxPercent","labelMax","appearance","highActive","lowActive","rangeLabels","valueLabel","textPercentLabelWithPercent","textUnitLabel","Host","getElement"],"mappings":"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","x_google_ignoreList":[0]}