import{dc as e,dd as c,de as n,U as u}from"./index-BlI3-bLW.js";import{a as y}from"./WebMap-vWya3UXi.js";import"./ColorBackground-Dh6WTEmw.js";import"./CollectionFlattener-3eM1v2LV.js";import"./basemapUtils-CpQKNmzZ.js";import"./TablesMixin-BBwIJ_1A.js";import"./MultiOriginJSONSupport-CLK2ozmu.js";import"./portalItemUtils-bWLVBGJL.js";import"./interfaces-CL2NbQte.js";import"./TimeInfo-C7f55tHf.js";import"./jsonContext-D13udXzk.js";import"./project-Bm_-rbq3.js";import"./FeatureLayer-CqZFGOXJ.js";import"./commonProperties-DvEUYxLA.js";import"./FeatureLayerBase-BE2X5d8b.js";import"./HeightModelInfo-C6jIS8MN.js";import"./featureLayerUtils-C1mHgQA4.js";import"./uuid-Cl5lrJ4c.js";import"./LayerFloorInfo-6l4YFx2O.js";import"./Relationship-WxGgLghx.js";import"./serviceCapabilitiesUtils-DfQf9h-c.js";import"./editsZScale-BNgBabEN.js";import"./APIKeyMixin-V3YcjKVy.js";import"./ArcGISService-D9SJk9Mi.js";import"./CustomParametersMixin-DC6OQ-5P.js";import"./EditBusLayer-D-5j5aG2.js";import"./FeatureEffectLayer-Vl71PbNB.js";import"./FeatureEffect-BsqcWUbG.js";import"./FeatureReductionLayer-BdUM0diP.js";import"./FeatureReductionSelection-D8Sji-4b.js";import"./labelingInfo-BbgRIaM8.js";import"./labelUtils-DiXPDPuN.js";import"./MD5-C9MwAd2G.js";import"./OperationalLayer-DBxMHjzI.js";import"./OrderedLayer-BZF1XGLJ.js";import"./OrderByInfo-n0rmYpVN.js";import"./PortalLayer-BaAKk7vv.js";import"./RefreshableLayer-B1WHNrNJ.js";import"./TemporalLayer-DBJPCy1y.js";import"./FeatureTemplate-BgZh28RU.js";import"./FeatureType-CMfhxkFp.js";import"./fieldProperties-Be4kZaoh.js";import"./versionUtils-Q10iCkfD.js";import"./styleUtils-B4Xw6O6K.js";import"./popupUtils-Cyp6Hd78.js";import"./AlphaCutoff-UcccL64p.js";import"./NetworkElement-16qvTn8Y.js";async function at(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,f:"json"}),...p}),s=`${i.path}/trace`;return u(s,m).then(a=>f(a))}async function et(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,async:!0,f:"json"}),...p}),s=`${i.path}/trace`,{data:a}=await u(s,m);return a.statusUrl}function f(o){const{data:t}=o;return y.fromJSON(t.traceResults)}export{et as submitTraceJob,at as trace};
//# sourceMappingURL=trace-Dj_20On_.js.map
