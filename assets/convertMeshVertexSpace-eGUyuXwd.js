import{w as s,I as m,b7 as p}from"./index-BlI3-bLW.js";import{p as n}from"./MeshVertexAttributes-DmLKRN9f.js";import{B as a}from"./vertexSpaceConversion-B_6JcWmu.js";import"./mat3-B87gwDFC.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-Bu1rR2Op.js";import"./spatialReferenceEllipsoidUtils-C_ngEmk8.js";import"./computeTranslationToOriginAndRotation-B6_Giu2C.js";import"./projectPointToVector-DI38NV1n.js";import"./meshVertexSpaceUtils-DTgChxUV.js";import"./MeshLocalVertexSpace-JIunC1y7.js";import"./vec3-C90jqwuf.js";import"./BufferView-Bqo2J_iG.js";import"./vec4-BiQib4bp.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
//# sourceMappingURL=convertMeshVertexSpace-eGUyuXwd.js.map
