import{dc as e,dd as c,de as n,U as u}from"./index-Club40b3.js";import{a as y}from"./WebMap-BueuDxS9.js";import"./ColorBackground-C9MmleQD.js";import"./CollectionFlattener-CDWmfFqW.js";import"./basemapUtils-DcCkyfUy.js";import"./TablesMixin-EU-_VM0Q.js";import"./MultiOriginJSONSupport-BEThRq27.js";import"./portalItemUtils-BFPvV2jZ.js";import"./interfaces-CL2NbQte.js";import"./TimeInfo-DkMYd3l4.js";import"./jsonContext-BI9PU4gF.js";import"./project-DeFuvCVW.js";import"./FeatureLayer-BT8Bna_d.js";import"./commonProperties-C7qVnWA0.js";import"./FeatureLayerBase-Brgke90g.js";import"./HeightModelInfo-CyeP0S36.js";import"./featureLayerUtils-DGP_qgKj.js";import"./uuid-Cl5lrJ4c.js";import"./LayerFloorInfo-CON6ZVex.js";import"./Relationship-C52zRLrQ.js";import"./serviceCapabilitiesUtils-CiTafVMC.js";import"./editsZScale-Dm-aRfhz.js";import"./APIKeyMixin-CygWNKme.js";import"./ArcGISService-Nvh9xVH1.js";import"./CustomParametersMixin-CWS7gQZS.js";import"./EditBusLayer-CuqbZRUQ.js";import"./FeatureEffectLayer-C8jzoxly.js";import"./FeatureEffect-22EIS-1y.js";import"./FeatureReductionLayer-Cd7ZHusx.js";import"./FeatureReductionSelection-kviuNazU.js";import"./labelingInfo-BYGFQ--y.js";import"./labelUtils-9UeHmwQ0.js";import"./MD5-C9MwAd2G.js";import"./OperationalLayer-Bg1GjXra.js";import"./OrderedLayer-BPW7XlQy.js";import"./OrderByInfo-BdSameQq.js";import"./PortalLayer-CB5zFuuX.js";import"./RefreshableLayer-8wKJynh4.js";import"./TemporalLayer-alZzuFqB.js";import"./FeatureTemplate-4pdVRtmp.js";import"./FeatureType-5k9utpDt.js";import"./fieldProperties-BzPjeRbS.js";import"./versionUtils-CA5wZBTi.js";import"./styleUtils-DYnR3WAv.js";import"./popupUtils-UvwxK4SE.js";import"./AlphaCutoff-UcccL64p.js";import"./NetworkElement-DfYN2Y9z.js";async function at(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,f:"json"}),...p}),s=`${i.path}/trace`;return u(s,m).then(a=>f(a))}async function et(o,t,p){const i=e(o),r=t.toJSON();r.traceLocations=JSON.stringify(t.traceLocations),t.resultTypes&&(r.resultTypes=JSON.stringify(t.resultTypes));const m=c(i.query,{query:n({...r,async:!0,f:"json"}),...p}),s=`${i.path}/trace`,{data:a}=await u(s,m);return a.statusUrl}function f(o){const{data:t}=o;return y.fromJSON(t.traceResults)}export{et as submitTraceJob,at as trace};
//# sourceMappingURL=trace-DMiQA3U_.js.map
